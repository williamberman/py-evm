# from eth.chains.base import MiningChain
# from eth.tools.builder.chain import api
# from eth.vm.forks.london import LondonVM
# from eth.tools.factories import new_transaction
# from eth_utils import to_canonical_address
# from tests.core.vm.conftest import canonical_address_a
# 
# 
# # TODO HERE -- Have the VM directly run this binary
# # TODO might have to change type to hex string or something
# 
# # `solc --bin-runtime ./PrimalityCheck.sol`
# bin_runtime = "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d5a2424914610030575b600080fd5b61004a600480360381019061004591906100df565b61004c565b005b81600110801561005e5750620ed8d582105b801561006a5750806001105b80156100785750620ed8d581105b61008157600080fd5b620ed8d58183610091919061014e565b14156100a05761009f6101a8565b5b5050565b600080fd5b6000819050919050565b6100bc816100a9565b81146100c757600080fd5b50565b6000813590506100d9816100b3565b92915050565b600080604083850312156100f6576100f56100a4565b5b6000610104858286016100ca565b9250506020610115858286016100ca565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610159826100a9565b9150610164836100a9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561019d5761019c61011f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212202c667a96599f0a0921c5454871e3ebdb6434748a412b3bf97324ce0d32ec5fe864736f6c63430008090033"
# # `solc --bin ./PrimalityCheck.sol`
# bin = "608060405234801561001057600080fd5b5061020d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d5a2424914610030575b600080fd5b61004a600480360381019061004591906100df565b61004c565b005b81600110801561005e5750620ed8d582105b801561006a5750806001105b80156100785750620ed8d581105b61008157600080fd5b620ed8d58183610091919061014e565b14156100a05761009f6101a8565b5b5050565b600080fd5b6000819050919050565b6100bc816100a9565b81146100c757600080fd5b50565b6000813590506100d9816100b3565b92915050565b600080604083850312156100f6576100f56100a4565b5b6000610104858286016100ca565b9250506020610115858286016100ca565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610159826100a9565b9150610164836100a9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561019d5761019c61011f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212202c667a96599f0a0921c5454871e3ebdb6434748a412b3bf97324ce0d32ec5fe864736f6c63430008090033"
# 
# vm_class = LondonVM
# 
# chain = api.build(
#     MiningChain,
#     api.fork_at(vm_class, 0),
#     api.disable_pow_check(),
#     api.genesis(params=dict(gas_limit=100000)),
# )
# 
# vm = chain.get_vm()
# 
# # from_ = 'TODO'
# # tx = new_transaction(vm, from_, None, data=bin)
# # receipt, computation = vm.apply_transaction(vm.get_header(), tx)
# 
# canonical_address_a = to_canonical_address("0x0f572e5295c57f15886f9b263e2f6d2d6c7b5ec6")
# 
# computation = vm.execute_bytecode(
#     origin=canonical_address_a,
#     to=canonical_address_a,
#     sender=Address(
#         b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x34'
#     ),
#     value=0,
#     code=code,
#     data=code,
#     gas=40000,
#     gas_price=1,
# )
# 
# computation.return_data
# computation.gas_used


# from eth.abc import ExecutionContextAPI, MessageAPI, TransactionContextAPI

# class SymbolicExecutionContext(ExecutionContextAPI):
#     def coinbase(self) -> Address:
#         # TODO return symbolic address
#         pass
# 
#     def timestamp(self) -> int:
#         # TODO return symbolic timestamp
#         pass
# 
#     # TODO more methods
# 
# class SymbolicMessage(MessageAPI):
#     pass
# 
# class SymbolicTransactionContext(TransactionContextAPI):
#     pass